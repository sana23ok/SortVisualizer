# -*- coding: utf-8 -*-
import sys

import numpy as np
# Form implementation generated from reading ui file 'gui.ui'
# Created by: PyQt5 UI code generator 5.15.9
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QMessageBox, QLabel, QSpinBox, QLCDNumber
from matplotlib import pyplot as plt
from matplotlib.backends.backend_template import FigureCanvas
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from test1 import Sort, MergeSort, QuikSort, IntroSort
from random import randint
import FileCreator


def generate_array(a, b, size):
    arr = []
    i = 0
    while i != size:
        temp = randint(a, b)
        # if temp not in arr:
        arr.append(temp)
        i += 1
    return arr


def show_info_messagebox():
    msg = QMessageBox()
    msg.setIcon(QMessageBox.Information)
    msg.setText("Size of array is bigger than interval")
    msg.setWindowTitle("Information")
    msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
    retval = msg.exec_()


def fillScrollArea(area, arr):
    # display unsorted array
    array_text = '\n'.join(arr)
    labelS = QLabel(array_text)
    area.setWidget(labelS)


def setPl(obj):
    obj.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
    # Create a palette object
    palette = QtGui.QPalette()
    lcdColor = QtGui.QColor(65, 105, 225)
    palette.setColor(QtGui.QPalette.WindowText, lcdColor)
    obj.setPalette(palette)


def settingsForSpinBox(obj, colour, min, max, val, name):
    obj.setStyleSheet(colour)
    obj.setMinimum(min)
    obj.setMaximum(max)
    obj.setProperty("value", val)
    obj.setObjectName(name)


def settingsForComboBox(obj, font, names, objName, style="color:rgb(0, 15, 0);\n"
                                                         "color-back-ground:rgb(126, 255, 245);\n"
                                                         ""):
    obj.setFont(font)
    obj.addItems(names)
    obj.setStyleSheet(style)
    obj.setObjectName(objName)


def setLabel(obj, size, weight, name, style="color:rgb(0,0,0);"):
    font = QtGui.QFont()
    font.setPointSize(size)
    # font.setBold(True)
    # font.setItalic(True)
    font.setWeight(weight)
    obj.setFont(font)
    obj.setStyleSheet(style)
    obj.setObjectName(name)


def setButton(obj, pointSize, name, style="QPushButton{\n"
                                          "background-color:rgb(105, 133, 255);\n"
                                          "border-style:outset;\n"
                                          "border-with:2px;\n"
                                          "border-radius:8px;\n"
                                          "}\n"
                                          "QPushButton:pressed{\n"
                                          " background-color:rgb(85, 120, 250);\n"
                                          "}\n"
                                          ""):
    font = QtGui.QFont()
    font.setPointSize(pointSize)
    obj.setFont(font)
    obj.setMouseTracking(False)
    obj.setStyleSheet(style)
    obj.setObjectName(name)


class Ui_MainWindow(object):

    def __init__(self):
        self.swap = QLCDNumber
        self.comp = QLCDNumber
        self.SaveBtn = None
        self.StartBtn = None
        self.nameField = None
        self.PlotFrame = None
        self.SpeedLabel = None
        self.AlgoLabel = None
        self.labelBorderB = None
        self.labelBorderA = None
        self.labelSize = None
        self.spinBox_limitB = QSpinBox
        self.spinBox_limitA = QSpinBox
        self.spinBox_Size = None
        self.comboBox = None
        self.horizontalSlider = None
        self.gridLayout = None
        self.formLayoutWidget = None
        self.centralwidget = None
        self.scrollAreaUS = None
        self.scrollAreaS = None
        self.amount = None
        self.saveFlag = False
        self.n = None
        self.lst = []
        self.sortingTime = 5
        self.font = QFont("Arial", 10)
        self.algoNamesList = ['Merge Sort', 'Quick Sort', 'Intro Sort']
        self.choice = None

    def setupUi(self, MainWindow):
        # main window settings
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1400, 880)
        MainWindow.setMinimumSize(QtCore.QSize(60, 120))
        MainWindow.setBaseSize(QtCore.QSize(5, 5))
        MainWindow.setLayoutDirection(QtCore.Qt.RightToLeft)
        MainWindow.setStyleSheet("background-color:rgb(255, 255, 255)")

        # central widget
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(50, 30, 321, 361))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.formLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        # slider settings
        self.horizontalSlider = QtWidgets.QSlider(self.formLayoutWidget)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setMinimum(1)
        self.horizontalSlider.setMaximum(20)
        self.horizontalSlider.setProperty("value", 0)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        # Connect the valueChanged signal to the updateSliderValue slot
        self.horizontalSlider.valueChanged.connect(self.updateSliderValue)
        self.gridLayout.addWidget(self.horizontalSlider, 12, 0, 1, 1)

        # setting for comboBox
        self.comboBox = QtWidgets.QComboBox(self.formLayoutWidget)
        settingsForComboBox(self.comboBox, self.font, self.algoNamesList, "comboBox")
        # connect combo box with action
        self.comboBox.currentIndexChanged.connect(lambda: self.comboBoxChanged(self.comboBox.currentText()))

        self.gridLayout.addWidget(self.comboBox, 10, 0, 1, 1)

        # налаштування кожного надпису, кнопки і тд в окремих ф-ціях

        # spin box to get size of array
        self.spinBox_Size = QtWidgets.QSpinBox(self.formLayoutWidget)
        # settingsForSpinBox(obj, colour, min, max, val, name):
        settingsForSpinBox(self.spinBox_Size, "color:rgb(0, 0, 0);", 10, 50000, 10, "spinBox_Size")

        self.gridLayout.addWidget(self.spinBox_Size, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 5, 0, 1, 1)

        # spin box to get value of first element
        self.spinBox_limitA = QtWidgets.QSpinBox(self.formLayoutWidget)
        settingsForSpinBox(self.spinBox_limitA, "color:rgb(0, 0, 0);", 0, 50000, 0, "spinBox_limitA")
        # coonect with event

        self.gridLayout.addWidget(self.spinBox_limitA, 3, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 2, 0, 1, 1)

        # spin box to get value of last element
        self.spinBox_limitB = QtWidgets.QSpinBox(self.formLayoutWidget)
        settingsForSpinBox(self.spinBox_limitB, "color:rgb(0, 0, 0);", 100, 50000, 100, "spinBox_limitB")
        self.gridLayout.addWidget(self.spinBox_limitB, 6, 0, 1, 1)

        # labels and settings for them
        # label for size of array
        self.labelSize = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.labelSize, 10, 50, "labelSize")
        self.gridLayout.addWidget(self.labelSize, 0, 1, 1, 1)
        # label for 1st element in array
        self.labelBorderA = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.labelBorderA, 10, 50, "labelBorderA ")
        self.gridLayout.addWidget(self.labelBorderA, 3, 1, 1, 1)
        # label for last element in array
        self.labelBorderB = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.labelBorderB, 10, 50, "labelBorderB")
        self.gridLayout.addWidget(self.labelBorderB, 6, 1, 1, 1)

        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 8, 0, 1, 1)
        # label for name of algo
        self.AlgoLabel = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.AlgoLabel, 10, 50, "AlgoLabel")
        self.gridLayout.addWidget(self.AlgoLabel, 10, 1, 1, 1)
        # label speed slider
        self.SpeedLabel = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.SpeedLabel, 10, 50, "SpeedLabel")
        self.gridLayout.addWidget(self.SpeedLabel, 12, 1, 1, 1)

        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem3, 11, 0, 1, 1)

        self.PlotFrame = QtWidgets.QFrame(self.centralwidget)
        # self.PlotFrame.setGeometry(QtCore.QRect(400, 10, 571, 451))
        self.PlotFrame.setGeometry(QtCore.QRect(400, 10, 900, 480))
        self.PlotFrame.setObjectName("PlotFrame")
        # embed graph
        # frame where pyPlot is going to be located
        # create horizontal layout
        self.horizontalLayout = QtWidgets.QVBoxLayout(self.PlotFrame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        # Canvas here
        # Create a Figure object and adjust its size
        # self.figure = plt.figure(figsize=(12, 8))  # Adjust the width and height as needed
        # self.figure = plt.figure()

        # self.figure = plt.figure()
        # self.canvas = FigureCanvas(self.figure)
        # self.canvas.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        # self.canvas.updateGeometry()

        self.figure = plt.figure(figsize=(12, 8))
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.canvas.updateGeometry()
        self.canvas = FigureCanvas(self.figure)
        # Add canvas | End canvas
        # self.horizontalLayout.addChildWidget(self.canvas)
        # create vertical layout
        self.verticalLayout = QtWidgets.QVBoxLayout(self.PlotFrame)
        self.verticalLayout.setObjectName("verticalLayout")
        # Canvas here
        # self.figure = plt.figure()
        # self.canvas = FigureCanvas(self.figure)
        # end of Canvas
        # ==========Add Canvas==============
        self.horizontalLayout.addWidget(self.canvas)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        # end of horizontal layout

        # scroll area
        self.scrollArea = QtWidgets.QScrollArea(self.PlotFrame)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")

        # self.scrollAreaWidgetContents = QtWidgets.QWidget()
        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 547, 427))
        # self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        # self.verticalLayout.addWidget(self.scrollArea)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(770, 670, 191, 107))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.labelSave = QtWidgets.QLabel(self.verticalLayoutWidget)
        setLabel(self.labelSave, 10, 50, "labelSave")

        self.verticalLayout_2.addWidget(self.labelSave)
        spacerItem4 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_2.addItem(spacerItem4)

        self.nameField = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.nameField.setObjectName("nameField")
        self.verticalLayout_2.addWidget(self.nameField)

        spacerItem5 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_2.addItem(spacerItem5)

        # button to start sorting
        # connect button with event
        self.StartBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.plotOnCanvas())
        self.StartBtn.setGeometry(QtCore.QRect(120, 420, 190, 30))
        setButton(self.StartBtn, 10, "StartBtn")

        # connect button with event
        self.SaveBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.save())
        self.SaveBtn.setEnabled(True)
        self.SaveBtn.setGeometry(QtCore.QRect(770, 790, 190, 30))
        setButton(self.SaveBtn, 10, "StartBtn")

        self.formLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget_2.setGeometry(QtCore.QRect(40, 490, 701, 350))
        self.formLayoutWidget_2.setObjectName("formLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.formLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem6, 0, 1, 1, 1)

        # scroll area for sorted array
        self.scrollAreaS = QtWidgets.QScrollArea(self.formLayoutWidget_2)
        self.scrollAreaS.setMinimumSize(QtCore.QSize(320, 320))
        self.scrollAreaS.setWidgetResizable(True)
        self.scrollAreaS.setObjectName("scrollAreaS")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 331, 318))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.scrollAreaS.setWidget(self.scrollAreaWidgetContents_3)
        # display sorted array in scroll area

        self.gridLayout_2.addWidget(self.scrollAreaS, 1, 0, 1, 1)

        self.UnordArrLabel = QtWidgets.QLabel(self.formLayoutWidget_2)
        setLabel(self.UnordArrLabel, 10, 50, "UnordArrLabel")
        self.gridLayout_2.addWidget(self.UnordArrLabel, 0, 2, 1, 1)

        self.SortArrayLabel = QtWidgets.QLabel(self.formLayoutWidget_2)
        setLabel(self.SortArrayLabel, 10, 50, "SortArrayLabel")
        self.gridLayout_2.addWidget(self.SortArrayLabel, 0, 0, 1, 1)

        # scroll area for unsorted
        self.scrollAreaUS = QtWidgets.QScrollArea(self.formLayoutWidget_2)
        self.scrollAreaUS.setMinimumSize(QtCore.QSize(320, 320))
        self.scrollAreaUS.setWidgetResizable(True)
        self.scrollAreaUS.setObjectName("scrollAreaUS")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 330, 318))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")

        # display unsorted array
        self.scrollAreaUS.setWidget(self.scrollAreaWidgetContents_2)
        self.gridLayout_2.addWidget(self.scrollAreaUS, 1, 2, 1, 1)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(770, 490, 191, 161))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        self.labelComp = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        setLabel(self.labelComp, 10, 50, "labelComp")
        self.labelComp.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.verticalLayout_3.addWidget(self.labelComp)
        # LCD for comparisons
        self.comp = QtWidgets.QLCDNumber(self.verticalLayoutWidget_2)
        self.comp.setObjectName("comp")
        self.comp.setDigitCount(8)
        # Set the color palette of the LCD numbers
        setPl(self.comp)

        self.verticalLayout_3.addWidget(self.comp)
        spacerItem7 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem7)

        self.labelSwaps = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        setLabel(self.labelSwaps, 10, 50, "labelSwaps ")

        self.labelSwaps.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.verticalLayout_3.addWidget(self.labelSwaps)
        # LCD for swaps
        self.swap = QtWidgets.QLCDNumber(self.verticalLayoutWidget_2)
        self.swap.setObjectName("swap")
        self.swap.setDigitCount(8)
        setPl(self.swap)
        self.verticalLayout_3.addWidget(self.swap)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.labelSize.setText(_translate("MainWindow", "Size of array"))
        self.labelBorderA.setText(_translate("MainWindow", "First element"))
        self.labelBorderB.setText(_translate("MainWindow", "Last element"))
        self.AlgoLabel.setText(_translate("MainWindow", "Algorithm"))
        self.SpeedLabel.setText(_translate("MainWindow", "Speed"))
        self.labelSave.setText(_translate("MainWindow", "Enter name of file to\n"
                                                        "save sorted array"))
        self.StartBtn.setText(_translate("MainWindow", "Sort"))
        self.SaveBtn.setText(_translate("MainWindow", "Save"))
        self.UnordArrLabel.setText(_translate("MainWindow", "Unsorted array"))
        self.SortArrayLabel.setText(_translate("MainWindow", "Sorted array"))
        self.labelComp.setText(_translate("MainWindow", "Number of\n"
                                                        "comparisons:"))
        self.labelSwaps.setText(_translate("MainWindow", "swaps:"))

    def updateSliderValue(self, value):
        self.sortingTime = value

    def comboBoxChanged(self, name):
        self.choice = name
        print(self.choice)

    def save(self):
        self.saveFlag = True
        FileCreator.saveInTxtFile(self.lst, self.nameField.text())

    def plotOnCanvas(self):
        self.n = self.spinBox_Size.value()
        self.amount = self.spinBox_Size.value()
        # Generate the data to sort
        self.lst = generate_array(self.spinBox_limitA.value(), self.spinBox_limitB.value(), self.n)
        self.x = np.arange(0, self.n, 1)
        fillScrollArea(self.scrollAreaUS, FileCreator.convert(self.lst))
        # Set up the animation timer
        self.timer = self.canvas.new_timer(interval=self.sortingTime,
                                           callbacks=[(self.animate, [], {})])
        # Start the sorting algorithm
        self.processSorting()

    def processSorting(self):
        self.timer.start()

    def animate(self):
        # Update the plot and wait for a short time
        if len(self.lst) <= 300:
            self.plot(0)
        else:
            self.plot_diabled()

        QApplication.processEvents()
        algorithm_classes = {
            self.algoNamesList[0]: MergeSort,
            self.algoNamesList[1]: QuikSort,
            self.algoNamesList[2]: IntroSort,
            None: MergeSort
        }
        SORT = algorithm_classes.get(self.choice)(self, self.lst)
        SORT.sort(0, self.n - 1)
        fillScrollArea(self.scrollAreaS, FileCreator.convert(self.lst))
        if not self.saveFlag:
            FileCreator.saveInTxtFile(self.lst, "output")
        SORT.printArr()
        x, y, z, v = SORT.getNumOfOperations()
        print("Number of swaps:", x)
        print("Number of comparisons:", y)
        print("Recursion depth:", z)
        print("Max depth:", v)
        # new_value = self.comp.intValue() + 455
        # self.comp.display(new_value)
        if len(self.lst) <= 300:
            ui.plot(0)
        self.timer.stop()

    def updateCounters(self, swaps=0, comp=0, recDepth=0, maxDepth=0):
        self.swap.display(self.swap.intValue() + swaps)
        self.comp.display(self.comp.intValue() + comp)

    def plot(self, highlighted_index):
        # Clear the previous plot and plot the current state of the list
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        self.figure.set_figwidth(10)  # Adjust the width as desired
        self.figure.set_figheight(6)  # Adjust the height as desired
        # Plot the bars with the desired color
        colors = ['royalblue'] * self.n  # default color
        # Set the color of the specific bar to highlight
        colors[highlighted_index] = 'hotpink'
        # Plot the bars with the colors
        ax.bar(self.x, self.lst, color=colors)
        # Remove unnecessary elements
        ax.spines['top'].set_visible(False)  # Remove top border
        ax.spines['right'].set_visible(False)  # Remove right border
        ax.spines['left'].set_visible(False)  # Remove left border
        ax.spines['bottom'].set_visible(False)  # Remove bottom border
        ax.tick_params(axis='both', which='both', length=0, labelsize=0)  # Remove ticks on the axes
        # Add a legend for the marked element
        legend_labels = ['pivot element']  # Replace with your desired legend labels
        legend_handles = [plt.Rectangle((0, 0), 1, 1, color='hotpink')]  # Create legend handles with desired colors
        ax.legend(legend_handles, legend_labels, loc='lower right',
                  ncol=2)  # Place the legend under the plot, with 2 columns
        # Adjust the layout to make space for the legend under the plot
        plt.subplots_adjust(bottom=0.4)  # Increase the bottom margin to accommodate the legend
        self.canvas.draw()

    def plot_diabled(self):
        # Clear the previous plot and plot the current state of the list
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        self.figure.set_figwidth(10)  # Adjust the width as desired
        self.figure.set_figheight(6)  # Adjust the height as desired

        # Plot the bars with the desired color
        colors = ['lightgray'] * self.n  # Default color

        # Set the color of the specific bar to highlight
        # Plot the bars with the colors
        ax.bar(self.x, self.lst, color=colors)

        # Remove unnecessary elements
        ax.spines['top'].set_visible(False)  # Remove top border
        ax.spines['right'].set_visible(False)  # Remove right border
        ax.spines['left'].set_visible(False)  # Remove left border
        ax.spines['bottom'].set_visible(False)  # Remove bottom border
        ax.tick_params(axis='both', which='both', length=0, labelsize=0)  # Remove ticks on the axes

        # Add a legend for the marked element and sorting disabled
        legend_labels = ['Animation is disabled if array > 300']
        legend_handles = [plt.Rectangle((0, 0), 1, 1, color='lightgray')]

        ax.legend(legend_handles, legend_labels, loc='lower right',
                  ncol=2)  # Place the legend under the plot, with 2 columns

        # Adjust the layout to make space for the legend under the plot
        plt.subplots_adjust(bottom=0.4)  # Increase the bottom margin to accommodate the legend

        self.canvas.draw()




if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    # app.exec_()
    sys.exit(app.exec_())
