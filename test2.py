# -*- coding: utf-8 -*-
import sys

import numpy as np
# Form implementation generated from reading ui file 'gui.ui'
# Created by: PyQt5 UI code generator 5.15.9
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QLinearGradient, QBrush, QPalette, QColor
from PyQt5.QtWidgets import QApplication, QMessageBox, QLabel, QSpinBox, QLCDNumber
from matplotlib import pyplot as plt
from matplotlib.backends.backend_template import FigureCanvas
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from test1 import Sort, MergeSort, QuikSort, IntroSort
from random import randint
import FileCreator


def generate_array(a, b, size):
    arr = []
    i = 0
    while i != size:
        temp = randint(a, b)
        # if temp not in arr:
        arr.append(temp)
        i += 1
    return arr


# def show_info_messagebox():
#     msg = QMessageBox()
#     msg.setIcon(QMessageBox.Information)
#     msg.setText("Size of array is bigger than interval")
#     msg.setWindowTitle("Information")
#     msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
#     retval = msg.exec_()


def fillScrollArea(area, arr):
    # display unsorted array
    array_text = '\n'.join(arr)
    labelS = QLabel(array_text)
    font = labelS.font()
    # font.setBold(True)
    font.setItalic(True)
    font.setPointSize(12)
    labelS.setFont(font)
    area.setWidget(labelS)


def setPl(obj):
    obj.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
    # Create a palette object
    palette = QtGui.QPalette()
    lcdColor = QtGui.QColor(65, 105, 225)
    palette.setColor(QtGui.QPalette.WindowText, lcdColor)
    obj.setPalette(palette)


def settingsForSpinBox(obj, color, min, max, val, name):
    style = "QSpinBox {"
    style += "background-color: rgb(201,217,235);"
    style += "color: black;"
    style += "border-style: outset;"
    style += "border-width: 0px;"
    style += "border-radius: 5px;"
    style += "height: 30px;"
    style += "margin-left: 10px;"
    style += "padding-left: 20px;"
    style += "font-size: 14px;"
    style += "}"

    style += "QSpinBox::up-button, QSpinBox::down-button {"
    style += "width: 18px;"  # Set the desired width for the buttons
    style += "height: 18px;"  # Set the desired height for the buttons
    style += "}"

    obj.setStyleSheet(style)
    obj.setMinimum(min)
    obj.setMaximum(max)
    obj.setProperty("value", val)
    obj.setObjectName(name)


def settingsForComboBox(obj, font, names, objName):
    # Set the background color and text color of the QComboBox drop-down button when pressed
    style = "QComboBox {"
    style += "background-color: rgb(201, 217, 235);"
    style += "color: black;"
    style += "border-style: outset;"
    style += "border-width: 0px;"
    style += "border-radius: 5px;"
    style += "height: 30px;"
    style += "margin-left: 10px;"
    style += "padding-left: 20px;"
    style += "font-size: 16px;"
    style += "}"

    obj.setFont(font)
    obj.addItems(names)
    obj.setStyleSheet(style)
    obj.setObjectName(objName)
    obj.setStyleSheet(style)


def setLabel(obj, size, weight, name, style="color:rgb(0,0,0);"):
    font = QtGui.QFont()
    font.setPointSize(size)
    # font.setBold(True)
    # font.setItalic(True)
    font.setWeight(weight)
    obj.setFont(font)
    obj.setStyleSheet(style)
    obj.setObjectName(name)


def setButton(obj, pointSize, name, style="QPushButton{\n"
                                          "background-color:rgb(105, 133, 255);\n"
                                          "border-style:outset;\n"
                                          "border-with:2px;\n"
                                          "border-radius:8px;\n"
                                          "}\n"
                                          "QPushButton:pressed{\n"
                                          " background-color:rgb(85, 120, 250);\n"
                                          "}\n"
                                          ""):
    font = QtGui.QFont()
    font.setPointSize(pointSize)
    obj.setFont(font)
    obj.setMouseTracking(False)
    obj.setStyleSheet(style)
    obj.setObjectName(name)


def setLineEdit(nameField, font, name, param1):
    font = QFont()
    font.setPointSize(font)
    nameField.setFont(font)
    nameField.setObjectName(name)
    nameField.setPlaceholderText(param1)


class Ui_MainWindow(object):

    def __init__(self):
        self.GenerationBtn = None
        self.generationFlag = False
        self.mapped_value = 0.0025
        self.swap = QLCDNumber
        self.comp = QLCDNumber
        self.SaveBtn = None
        self.StartBtn = None
        self.nameField = None
        self.PlotFrame = None
        self.SpeedLabel = None
        self.AlgoLabel = None
        self.labelBorderB = None
        self.labelBorderA = None
        self.labelSize = None
        self.spinBox_limitB = QSpinBox
        self.spinBox_limitA = QSpinBox
        self.spinBox_Size = None
        self.comboBox = None
        self.horizontalSlider = None
        self.gridLayout = None
        self.formLayoutWidget = None
        self.centralwidget = None
        self.scrollAreaUS = None
        self.scrollAreaS = None
        self.amount = None
        self.saveFlag = False
        self.n = None
        self.lst = []
        self.sortingTime = 5
        self.font = QFont("Arial", 10)
        self.algoNamesList = ['Merge Sort', 'Quick Sort', 'Intro Sort']
        self.choice = None

    def setupUi(self, MainWindow):
        # main window settings
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1350, 880)
        MainWindow.setMinimumSize(QtCore.QSize(60, 120))
        MainWindow.setBaseSize(QtCore.QSize(5, 5))
        MainWindow.setLayoutDirection(QtCore.Qt.RightToLeft)

        palette = MainWindow.palette()
        gradient = QLinearGradient(0, 0, 0, MainWindow.height())

        gradient.setColorAt(0, QColor(65, 105, 226))
        # gradient.setColorAt(0, QColor(143, 163, 225))
        gradient.setColorAt(1, QColor(0, 0, 100))

        brush = QBrush(gradient)
        palette.setBrush(QPalette.Background, brush)
        MainWindow.setPalette(palette)

        # MainWindow.setStyleSheet("background-color:rgb(173, 216, 230)")

        # central widget
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(50, 30, 321, 361))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.formLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        # slider settings
        self.horizontalSlider = QtWidgets.QSlider(self.formLayoutWidget)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setMinimum(1)
        self.horizontalSlider.setMaximum(500000)
        self.horizontalSlider.setTickInterval(100)  # Set the tick interval
        self.horizontalSlider.setSingleStep(100)  # Set the step size
        self.horizontalSlider.setProperty("value", 250000)
        # Connect the valueChanged signal to the updateSliderValue slot
        self.horizontalSlider.valueChanged.connect(lambda: self.updateSliderValue(self.horizontalSlider.value()))
        self.gridLayout.addWidget(self.horizontalSlider, 12, 0, 1, 1)

        # setting for comboBox
        self.comboBox = QtWidgets.QComboBox(self.formLayoutWidget)
        settingsForComboBox(self.comboBox, self.font, self.algoNamesList, "comboBox")
        # connect combo box with action
        self.comboBox.currentIndexChanged.connect(lambda: self.comboBoxChanged(self.comboBox.currentText()))

        self.gridLayout.addWidget(self.comboBox, 10, 0, 1, 1)

        # налаштування кожного надпису, кнопки і тд в окремих ф-ціях
        # spin box to get size of array
        self.spinBox_Size = QtWidgets.QSpinBox(self.formLayoutWidget)
        # settingsForSpinBox(obj, colour, min, max, val, name):
        settingsForSpinBox(self.spinBox_Size, "color:rgb(0, 0, 0);", 10, 50000, 50, "spinBox_Size")

        self.gridLayout.addWidget(self.spinBox_Size, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 5, 0, 1, 1)

        # spin box to get value of first element
        self.spinBox_limitA = QtWidgets.QSpinBox(self.formLayoutWidget)
        settingsForSpinBox(self.spinBox_limitA, "color:rgb(0, 0, 0);", 0, 50000, 0, "spinBox_limitA")
        # connect with event
        self.gridLayout.addWidget(self.spinBox_limitA, 3, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 2, 0, 1, 1)
        # spin box to get value of last element
        self.spinBox_limitB = QtWidgets.QSpinBox(self.formLayoutWidget)
        settingsForSpinBox(self.spinBox_limitB, "color:rgb(0, 0, 0);", 100, 50000, 100, "spinBox_limitB")
        self.gridLayout.addWidget(self.spinBox_limitB, 6, 0, 1, 1)
        # labels and settings for them
        # label for size of array
        self.labelSize = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.labelSize, 10, 50, "labelSize")
        self.gridLayout.addWidget(self.labelSize, 0, 1, 1, 1)
        # label for 1st element in array
        self.labelBorderA = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.labelBorderA, 10, 50, "labelBorderA ")
        self.gridLayout.addWidget(self.labelBorderA, 3, 1, 1, 1)
        # label for last element in array
        self.labelBorderB = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.labelBorderB, 10, 50, "labelBorderB")
        self.gridLayout.addWidget(self.labelBorderB, 6, 1, 1, 1)

        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 8, 0, 1, 1)
        # label for name of algo
        self.AlgoLabel = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.AlgoLabel, 10, 50, "AlgoLabel")
        self.gridLayout.addWidget(self.AlgoLabel, 10, 1, 1, 1)
        # label speed slider
        self.SpeedLabel = QtWidgets.QLabel(self.formLayoutWidget)
        setLabel(self.SpeedLabel, 10, 50, "SpeedLabel")
        self.gridLayout.addWidget(self.SpeedLabel, 12, 1, 1, 1)

        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem3, 11, 0, 1, 1)

        self.PlotFrame = QtWidgets.QFrame(self.centralwidget)
        self.PlotFrame.setGeometry(QtCore.QRect(400, 6, 900, 470))
        self.PlotFrame.setObjectName("PlotFrame")
        # embed graph
        # frame where pyPlot is going to be located
        # create horizontal layout
        self.horizontalLayout = QtWidgets.QVBoxLayout(self.PlotFrame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        # Canvas here
        # Create a Figure object and adjust its size
        # bar_width = 0.8 / 300
        # self.figure = plt.figure(figsize=(12, max(8, 300 * bar_width)))
        array_size = 300  # Get the size of the array
        # Calculate the figure size based on the array size
        # figure_width = max(8, int(array_size * 0.03))  # Adjust the multiplication factor (0.03) as needed
        # figure_height = max(6, int(array_size * 0.02))  # Adjust the multiplication factor (0.02) as needed
        # self.figure = plt.figure(figsize=(figure_width, figure_height))
        self.figure = plt.figure(figsize=(8, 6))
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.canvas.updateGeometry()
        self.canvas = FigureCanvas(self.figure)
        # Add canvas | End canvas
        # self.horizontalLayout.addChildWidget(self.canvas)
        # create vertical layout
        self.verticalLayout = QtWidgets.QVBoxLayout(self.PlotFrame)
        self.verticalLayout.setObjectName("verticalLayout")
        # Canvas here
        # self.figure = plt.figure()
        # self.canvas = FigureCanvas(self.figure)
        # end of Canvas
        # ==========Add Canvas==============
        self.horizontalLayout.addWidget(self.canvas)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        # end of horizontal layout

        # button to start sorting
        self.StartBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.plotOnCanvas())
        self.StartBtn.setGeometry(QtCore.QRect(160, 410, 101, 31))
        setButton(self.StartBtn, 10, "StartBtn")

        self.GenerationBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.generate())
        self.GenerationBtn.setGeometry(QtCore.QRect(50, 410, 101, 31))
        setButton(self.GenerationBtn, 10, "GenerationBtn")

        self.StopBtn = QtWidgets.QPushButton(self.centralwidget)
        self.StopBtn.setGeometry(QtCore.QRect(270, 410, 101, 31))
        setButton(self.StopBtn, 10, "StopBtn")

        # connect button with event
        self.SaveBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.save())
        self.SaveBtn.setEnabled(True)
        self.SaveBtn.setGeometry(QtCore.QRect(1000, 712, 195, 35))
        setButton(self.SaveBtn, 10, "StartBtn")

        self.formLayoutWidgetForScrollAreas = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidgetForScrollAreas.setGeometry(QtCore.QRect(40, 490, 701, 350))
        self.formLayoutWidgetForScrollAreas.setObjectName("formLayoutWidget_2")
        self.gridLayoutScroll = QtWidgets.QGridLayout(self.formLayoutWidgetForScrollAreas)
        self.gridLayoutScroll.setContentsMargins(0, 0, 0, 0)
        self.gridLayoutScroll.setObjectName("gridLayout_2")
        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.gridLayoutScroll.addItem(spacerItem6, 0, 1, 1, 1)

        # scroll area for sorted array
        self.scrollAreaS = QtWidgets.QScrollArea(self.formLayoutWidgetForScrollAreas)
        self.scrollAreaS.setMinimumSize(QtCore.QSize(320, 320))
        self.scrollAreaS.setWidgetResizable(True)
        self.scrollAreaS.setObjectName("scrollAreaS")
        self.scrollAreaS.setStyleSheet("background-color: rgb(100,149,237)")

        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 331, 318))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.scrollAreaS.setWidget(self.scrollAreaWidgetContents_3)
        # display sorted array in scroll area
        self.gridLayoutScroll.addWidget(self.scrollAreaS, 1, 0, 1, 1)

        self.UnordArrLabel = QtWidgets.QLabel(self.formLayoutWidgetForScrollAreas)
        setLabel(self.UnordArrLabel, 10, 50, "UnordArrLabel")
        self.gridLayoutScroll.addWidget(self.UnordArrLabel, 0, 2, 1, 1)

        self.SortArrayLabel = QtWidgets.QLabel(self.formLayoutWidgetForScrollAreas)
        setLabel(self.SortArrayLabel, 10, 50, "SortArrayLabel")
        self.gridLayoutScroll.addWidget(self.SortArrayLabel, 0, 0, 1, 1)

        # scroll area for unsorted
        self.scrollAreaUS = QtWidgets.QScrollArea(self.formLayoutWidgetForScrollAreas)
        self.scrollAreaUS.setMinimumSize(QtCore.QSize(320, 320))
        self.scrollAreaUS.setWidgetResizable(True)
        self.scrollAreaUS.setObjectName("scrollAreaUS")
        self.scrollAreaUS.setStyleSheet("background-color: rgb(100,149,237)")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 330, 318))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")

        # display unsorted array
        self.scrollAreaUS.setWidget(self.scrollAreaWidgetContents_2)
        self.gridLayoutScroll.addWidget(self.scrollAreaUS, 1, 2, 1, 1)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(770, 490, 190, 255))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        self.labelComp = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        setLabel(self.labelComp, 10, 20, "labelComp")
        self.labelComp.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.verticalLayout_3.addWidget(self.labelComp)

        self.lcdComp = QtWidgets.QLCDNumber(self.verticalLayoutWidget_2)
        self.lcdComp.setObjectName("lcdNumber")
        self.verticalLayout_3.addWidget(self.lcdComp)
        setPl(self.lcdComp)

        spacerItem5 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem5)

        self.labelSwap = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        setLabel(self.labelSwap, 10, 20, "labelSwap")
        self.labelSwap.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.verticalLayout_3.addWidget(self.labelSwap)

        self.lcdSwap= QtWidgets.QLCDNumber(self.verticalLayoutWidget_2)
        self.lcdSwap.setObjectName("lcdSwap")
        self.verticalLayout_3.addWidget(self.lcdSwap)
        setPl(self.lcdSwap)

        spacerItem6 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem6)

        self.labelFile = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        setLabel(self.labelFile, 10, 20, "labelFile")
        self.labelFile.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.verticalLayout_3.addWidget(self.labelFile)

        # self.lcdTime = QtWidgets.QLCDNumber(self.verticalLayoutWidget_2)
        # self.lcdTime.setObjectName("lcdTime")
        # self.verticalLayout_3.addWidget(self.lcdTime)
        # setPl(self.lcdTime)
        self.nameField = QtWidgets.QLineEdit(self.verticalLayoutWidget_2)
        self.nameField.setObjectName("nameField")
        self.nameField.setStyleSheet("background-color: rgb(201,217,235)")
        self.nameField.setFixedHeight(35)
        self.verticalLayout_3.addWidget(self.nameField)

        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(1000, 490, 190, 163))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")

        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")

        self.labelRecursion = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        setLabel(self.labelRecursion, 10, 20, "labelRecursion")
        self.labelRecursion.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.verticalLayout_4.addWidget(self.labelRecursion)

        self.lcdRec = QtWidgets.QLCDNumber(self.verticalLayoutWidget_3)
        self.lcdRec.setObjectName("lcdRec")
        self.verticalLayout_4.addWidget(self.lcdRec)
        setPl(self.lcdRec)

        spacerItem7 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_4.addItem(spacerItem7)

        self.labelMaxDepth = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        setLabel(self.labelMaxDepth, 10, 20, "labelMaxDepth")
        self.labelMaxDepth.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.verticalLayout_4.addWidget(self.labelMaxDepth)

        self.lcdMaxD = QtWidgets.QLCDNumber(self.verticalLayoutWidget_3)
        self.lcdMaxD.setObjectName("lcdMaxD")
        self.verticalLayout_4.addWidget(self.lcdMaxD)
        setPl(self.lcdMaxD)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.labelSize.setText(_translate("MainWindow", "Size of array"))
        self.labelBorderA.setText(_translate("MainWindow", "First element"))
        self.labelBorderB.setText(_translate("MainWindow", "Last element"))
        self.AlgoLabel.setText(_translate("MainWindow", "Algorithm"))
        self.SpeedLabel.setText(_translate("MainWindow", "Speed"))
        # self.labelSave.setText(_translate("MainWindow", "Enter name of file to\n"
        #                                                 "save sorted array"))
        self.StartBtn.setText(_translate("MainWindow", "Sort"))
        self.GenerationBtn.setText(_translate("MainWindow", "Generate"))
        self.StopBtn.setText(_translate("MainWindow", "Stop"))
        self.SaveBtn.setText(_translate("MainWindow", "Save"))
        self.UnordArrLabel.setText(_translate("MainWindow", "Unsorted array"))
        self.SortArrayLabel.setText(_translate("MainWindow", "Sorted array"))

        self.labelComp.setText(_translate("MainWindow", "Comparisons:"))
        self.labelSwap.setText(_translate("MainWindow", "Swaps:"))
        self.labelFile.setText(_translate("MainWindow", "Name of file:"))
        self.labelRecursion.setText(_translate("MainWindow", "Recursion depth:"))
        self.labelMaxDepth.setText(_translate("MainWindow", "Max depht:"))
        self.GenerationBtn.setText(_translate("MainWindow", "Generate"))

    def updateSliderValue(self, value):
        self.sortingTime = 10
        self.mapped_value = value / 10000000

    def comboBoxChanged(self, name):
        self.choice = name
        print(self.choice)

    def save(self):
        self.saveFlag = True
        FileCreator.saveInTxtFile(self.lst, "output")

    def generate(self):
        self.generationFlag = True
        self.n = self.spinBox_Size.value()
        # self.amount = self.spinBox_Size.value()
        # Generate the data to sort
        if self.spinBox_Size.value() > self.spinBox_limitB.value():
            self.lst = generate_array(self.spinBox_limitA.value(), self.spinBox_Size.value(), self.n)
            self.spinBox_limitB.setValue(self.spinBox_Size.value())
        else:
            self.lst = generate_array(self.spinBox_limitA.value(), self.spinBox_limitB.value(), self.n)

        self.x = np.arange(0, self.n, 1)
        fillScrollArea(self.scrollAreaUS, FileCreator.convert(self.lst))
        ui.plot()

    def plotOnCanvas(self):
        if not self.generationFlag:
            self.generate()
        # Set up the animation timer
        self.timer = self.canvas.new_timer(interval=self.sortingTime,
                                           callbacks=[(self.animate, [], {})])
        print(self.sortingTime)
        # Start the sorting algorithm
        self.processSorting()

    def processSorting(self):
        self.timer.start()

    def buttonsStatus(self, flag):
        self.horizontalSlider.setDisabled(flag)
        self.StartBtn.setDisabled(flag)
        self.GenerationBtn.setDisabled(flag)
        self.SaveBtn.setDisabled(flag)

    def animate(self):
        self.buttonsStatus(True)
        # Update the plot and wait for a short time
        self.plot()

        QApplication.processEvents()
        algorithm_classes = {
            self.algoNamesList[0]: MergeSort,
            self.algoNamesList[1]: QuikSort,
            self.algoNamesList[2]: IntroSort,
            None: MergeSort
        }
        SORT = algorithm_classes.get(self.choice)(self, self.lst)
        SORT.sort(0, self.n - 1)
        fillScrollArea(self.scrollAreaS, FileCreator.convert(self.lst))
        if not self.saveFlag:
            FileCreator.saveInTxtFile(self.lst, "output")
        SORT.printArr()
        x, y, z, v = SORT.getNumOfOperations()
        print("Number of swaps:", x)
        print("Number of comparisons:", y)
        print("Recursion depth:", z)
        print("Max depth:", v)
        # new_value = self.comp.intValue() + 455
        # self.comp.display(new_value)
        if len(self.lst) <= 300:
            ui.plot()
        self.timer.stop()
        self.buttonsStatus(False)
        self.generationFlag=False

    def updateCounters(self, swaps=0, comp=0, recDepth=0, maxDepth=0):
        self.lcdSwap.display(self.lcdSwap.intValue() + swaps)
        self.lcdComp.display(self.lcdComp.intValue() + comp)
        self.lcdRec.display(self.lcdRec.intValue() + recDepth)
        self.lcdMaxD.display(self.lcdMaxD.intValue() + maxDepth)

    def plot(self, highlighted_index=0):
        if highlighted_index==0:
            highlighted_index = self.n-1
        # Clear the previous plot and plot the current state of the list
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        # Clear the previous figure and create a new one with adjusted size
        # self.figure.set_figwidth(self.PlotFrame.width() / self.figure.get_dpi())
        # self.figure.set_figheight(self.PlotFrame.height() / self.figure.get_dpi())

        # Plot the bars with the color
        if len(self.lst) > 300:
            colors = ['gray'] * min(self.n, 100)  # default color, display only 100 bars
            highlighted_index = 0
            colors[highlighted_index] = 'gray'
        else:
            colors = ['royalblue'] * self.n  # default color
            colors[highlighted_index] = 'navy'

        ax.set_facecolor('white')
        ax.bar(self.x[:min(self.n, 300)], self.lst[:min(self.n, 300)], color=colors, width=1)  # display only 100 bars
        # Remove unnecessary elements and change their color to white
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_visible(False)
        ax.spines['bottom'].set_visible(False)
        ax.spines['top'].set_color('white')
        ax.spines['right'].set_color('white')
        ax.spines['left'].set_color('white')
        ax.spines['bottom'].set_color('white')
        ax.tick_params(axis='both', which='both', length=0, labelsize=0,
                       color='white')  # Remove ticks on the axes and set color to white

        # Add a legend for the marked element and sorting disabled
        if len(self.lst) > 300:
            legend_labels = ['Animation is disabled \nif array bigger than 300']
            legend_handles = [plt.Rectangle((0, 0), 1, 1, color='lightgray')]
        else:
            legend_labels = ['pivot element']  # Replace with your desired legend labels
            legend_handles = [plt.Rectangle((0, 0), 1, 1, color='navy')]

        ax.legend(legend_handles, legend_labels, loc='lower right', ncol=2)

        # Adjust the layout to make space for the legend under the plot
        plt.subplots_adjust(left=0.02, right=1, bottom=0.02)

        # Redraw the canvas
        self.canvas.draw()
        # plt.pause(self.mapped_value)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    # app.exec_()
    sys.exit(app.exec_())
